{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js\";\nimport React, { Component } from \"react\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\nimport DeadModal from '../components/DeadModal';\nimport ScoreModal from '../components/ScoreModal';\nimport { Spring } from 'react-spring/renderprops';\n\nclass QuizContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cities: [],\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 3000,\n      previousScore: 3000,\n      nextButton: false,\n      questions: [],\n      unresponsive: false,\n      deadModal: false,\n      scoreModal: false\n    };\n\n    this.createGame = () => {\n      let dataObj = {\n        game: {\n          user_id: this.props.user.id,\n          score: this.state.score,\n          questions_attributes: [...this.state.questions]\n        }\n      };\n      let configObj = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify(dataObj)\n      };\n      fetch('http://localhost:3000/games', configObj).then(resp => resp.json()).then(data => console.log(data));\n    };\n\n    this.showScoreModal = () => {\n      this.setState({\n        scoreModal: true\n      });\n    };\n\n    this.closeScoreModal = () => {\n      this.setState({\n        scoreModal: false\n      });\n    };\n\n    this.showModal = () => {\n      this.setState({\n        deadModal: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        deadModal: false\n      });\n    };\n\n    this.resetPlay = () => {\n      fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n        cities: cities\n      }));\n      this.setState({\n        cityIndex: 0,\n        isMarkerShown: false,\n        yourChoice: null,\n        score: 3000,\n        previousScore: 3000,\n        distance: null,\n        nextButton: false,\n        questions: [],\n        deadModal: false,\n        unresponsive: false,\n        scoreModal: false\n      });\n    };\n\n    this.setDistance = distance => {\n      this.setState({\n        distance: distance\n      });\n    };\n\n    this.addQuestion = question => {\n      this.setState({\n        questions: [...this.state.questions, question]\n      });\n    };\n\n    this.toggleMarker = () => {\n      this.setState({\n        isMarkerShown: !this.state.isMarkerShown\n      });\n    };\n\n    this.setChoice = latlng => {\n      this.setState({\n        yourChoice: latlng\n      });\n    };\n\n    this.nextQuest = () => {\n      this.setState({\n        cityIndex: this.state.cityIndex + 1,\n        nextButton: !this.state.nextButton,\n        unresponsive: false,\n        isMarkerShown: false,\n        yourChoice: null,\n        distance: null\n      });\n    };\n\n    this.toggleNextButton = () => {\n      this.setState({\n        nextButton: !this.state.nextButton\n      });\n    };\n\n    this.setScore = distance => {\n      this.setState(state => ({\n        score: state.score - distance,\n        previousScore: state.score\n      }));\n    };\n\n    this.makeUnresp = () => {\n      this.setState({\n        unresponsive: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n      cities: cities\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(DeadModal, {\n      show: this.state.deadModal,\n      closeModal: this.closeModal,\n      resetPlay: this.resetPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(ScoreModal, {\n      show: this.state.scoreModal,\n      resetPlay: this.resetPlay,\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(City, {\n      currentCity: this.state.cities[this.state.cityIndex],\n      cityIndex: this.state.cityIndex,\n      nextButton: this.state.nextButton,\n      nextQuest: this.nextQuest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      id: \"game-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Map, {\n      setDistance: this.setDistance,\n      makeUnresp: this.makeUnresp,\n      unresponsive: this.state.unresponsive,\n      showScoreModal: this.showScoreModal,\n      cityIndex: this.state.cityIndex,\n      createGame: this.createGame,\n      showModal: this.showModal,\n      currentScore: this.state.score,\n      addQuestion: this.addQuestion,\n      toggleNextButton: this.toggleNextButton,\n      setScore: this.setScore,\n      currentCity: this.state.cities[this.state.cityIndex],\n      yourChoice: this.state.yourChoice,\n      setChoice: this.setChoice,\n      toggleMarker: this.toggleMarker,\n      isMarkerShown: this.state.isMarkerShown,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\".concat(APIKEY, \"&libraries=geometry\"),\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"800px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Score, {\n      score: this.state.score,\n      previousScore: this.state.previousScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })))), React.createElement(Spring, {\n      from: {\n        opacity: 0\n      },\n      to: {\n        opacity: this.state.distance ? 1 : 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, props => React.createElement(\"div\", {\n      id: \"distance-away\",\n      style: props,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"check circle outline\",\n      size: 'big',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.state.distance))));\n  }\n\n}\n\nexport default QuizContainer;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js"],"names":["React","Component","Grid","Icon","City","Map","Score","APIKEY","DeadModal","ScoreModal","Spring","QuizContainer","state","cities","cityIndex","isMarkerShown","yourChoice","score","previousScore","nextButton","questions","unresponsive","deadModal","scoreModal","createGame","dataObj","game","user_id","props","user","id","questions_attributes","configObj","method","headers","body","JSON","stringify","fetch","then","resp","json","data","console","log","showScoreModal","setState","closeScoreModal","showModal","closeModal","resetPlay","distance","setDistance","addQuestion","question","toggleMarker","setChoice","latlng","nextQuest","toggleNextButton","setScore","makeUnresp","componentDidMount","render","height","opacity"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\nimport DeadModal from '../components/DeadModal'\nimport ScoreModal from '../components/ScoreModal'\nimport {Spring} from 'react-spring/renderprops'\n\nclass QuizContainer extends Component {\n  state = {\n    cities: [],\n    cityIndex: 0,\n    isMarkerShown: false,\n    yourChoice: null,\n    score: 3000,\n    previousScore: 3000,\n    nextButton: false,\n    questions: [],\n    unresponsive: false,\n    deadModal: false,\n    scoreModal: false\n  };\n\n  createGame = () => {\n    \n   let dataObj = {game: {user_id: this.props.user.id, score: this.state.score, questions_attributes: [...this.state.questions]}}\n   let configObj = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify(dataObj)\n    }\n\n    \n\n    fetch('http://localhost:3000/games', configObj).then(resp => resp.json()).then(data => console.log(data))\n  }\n\n  showScoreModal = () => {\n    this.setState({\n      scoreModal: true\n    })\n  }\n\n  closeScoreModal = () => {\n    this.setState({\n      scoreModal: false\n    })\n  }\n\n    showModal = () => {\n      this.setState({\n          deadModal: true\n      })\n  }\n\n  closeModal = () => {\n    this.setState({\n        deadModal: false\n    })\n  }\n\n  resetPlay = () => {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n\n    this.setState({\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 3000,\n      previousScore: 3000,\n      distance: null,\n      nextButton: false,\n      questions: [],\n      deadModal: false,\n      unresponsive: false,\n      scoreModal: false\n    })\n  }\n\n  setDistance = (distance) => {\n    this.setState({distance: distance})\n  }\n\n  addQuestion = (question) => {\n    this.setState({\n      questions: [...this.state.questions, question]\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n  }\n\n  toggleMarker = () => {\n    this.setState({ isMarkerShown: !this.state.isMarkerShown });\n  };\n\n  setChoice = latlng => {\n    this.setState({ yourChoice: latlng });\n  };\n\n  nextQuest = () => {\n    this.setState({\n      cityIndex: this.state.cityIndex + 1,\n      nextButton: !this.state.nextButton,\n      unresponsive: false,\n      isMarkerShown: false,\n      yourChoice: null,\n      distance: null\n    });\n  };\n\n  toggleNextButton = () => {\n    this.setState({\n      nextButton: !this.state.nextButton\n    });\n  };\n\n  setScore = distance => {\n    this.setState(state => ({\n      score: state.score - distance,\n      previousScore: state.score\n    }));\n  };\n\n  makeUnresp = () => {\n    this.setState({unresponsive: true})\n  }\n\n  render() {\n    return (\n      <div>\n        <DeadModal show={this.state.deadModal} closeModal={this.closeModal} resetPlay={this.resetPlay}/>\n        <ScoreModal show={this.state.scoreModal} resetPlay={this.resetPlay} score={this.state.score}/>\n        <City\n       \n          currentCity={this.state.cities[this.state.cityIndex]}\n          cityIndex={this.state.cityIndex}\n          nextButton={this.state.nextButton}\n          nextQuest={this.nextQuest}\n        />\n        <Grid id=\"game-grid\">\n          <Grid.Row>\n            <Grid.Column width={13}>\n              <Map\n                setDistance={this.setDistance}\n                makeUnresp={this.makeUnresp}\n                unresponsive={this.state.unresponsive}\n                showScoreModal={this.showScoreModal}\n                cityIndex={this.state.cityIndex}\n                createGame={this.createGame}\n                showModal={this.showModal}\n                currentScore={this.state.score}\n                addQuestion={this.addQuestion}\n                toggleNextButton={this.toggleNextButton}\n                setScore={this.setScore}\n                currentCity={this.state.cities[this.state.cityIndex]}\n                yourChoice={this.state.yourChoice}\n                setChoice={this.setChoice}\n                toggleMarker={this.toggleMarker}\n                isMarkerShown={this.state.isMarkerShown}\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${APIKEY}&libraries=geometry`}\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `800px` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n              />\n            </Grid.Column>\n            <Grid.Column width={1}>\n              <Score\n                score={this.state.score}\n                previousScore={this.state.previousScore}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n                <Spring\n                  from={{ opacity: 0 }}\n                  to={{ opacity: this.state.distance ? 1 : 0}}>\n                  {props => <div id='distance-away' style={props}><Icon name='check circle outline' size={'big'}/><h2>{this.state.distance}</h2></div>}\n                </Spring>\n      </div>\n    );\n  }\n}\n\nexport default QuizContainer;\n"]},"metadata":{},"sourceType":"module"}