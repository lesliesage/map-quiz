{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js\";\nimport React, { Component } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\nimport DeadModal from '../components/DeadModal';\nimport ScoreModal from '../components/ScoreModal';\n\nclass QuizContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cities: [],\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 3000,\n      previousScore: 3000,\n      nextButton: false,\n      questions: [],\n      deadModal: false,\n      scoreModal: false\n    };\n\n    this.createGame = () => {\n      debugger;\n      let dataObj = {\n        game: {\n          user_id: this.props.user.id,\n          score: this.state.score,\n          questions_attributes: [...this.state.questions]\n        }\n      };\n      let configObj = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify(dataObj)\n      };\n      debugger;\n      fetch('http://localhost:3000/games', configObj).then(resp => resp.json()).then(data => console.log(data));\n    };\n\n    this.showScoreModal = () => {\n      this.setState({\n        scoreModal: true\n      });\n    };\n\n    this.closeScoreModal = () => {\n      this.setState({\n        scoreModal: false\n      });\n    };\n\n    this.showModal = () => {\n      this.setState({\n        deadModal: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        deadModal: false\n      });\n    };\n\n    this.resetPlay = () => {\n      fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n        cities: cities\n      }));\n      this.setState({\n        cityIndex: 0,\n        isMarkerShown: false,\n        yourChoice: null,\n        score: 3000,\n        previousScore: 3000,\n        nextButton: false,\n        questions: [],\n        deadModal: false,\n        scoreModal: false\n      });\n    };\n\n    this.addQuestion = question => {\n      this.setState({\n        questions: [...this.state.questions, question]\n      });\n    };\n\n    this.toggleMarker = () => {\n      this.setState({\n        isMarkerShown: !this.state.isMarkerShown\n      });\n    };\n\n    this.setChoice = latlng => {\n      this.setState({\n        yourChoice: latlng\n      });\n    };\n\n    this.nextQuest = () => {\n      this.setState({\n        cityIndex: this.state.cityIndex + 1,\n        nextButton: !this.state.nextButton,\n        isMarkerShown: false,\n        yourChoice: null\n      });\n    };\n\n    this.toggleNextButton = () => {\n      this.setState({\n        nextButton: !this.state.nextButton\n      });\n    };\n\n    this.setScore = distance => {\n      this.setState(state => ({\n        score: state.score - distance,\n        previousScore: state.score\n      }));\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n      cities: cities\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(DeadModal, {\n      show: this.state.deadModal,\n      closeModal: this.closeModal,\n      resetPlay: this.resetPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(ScoreModal, {\n      show: this.state.scoreModal,\n      resetPlay: this.resetPlay,\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(City, {\n      currentCity: this.state.cities[this.state.cityIndex],\n      cityIndex: this.state.cityIndex,\n      nextButton: this.state.nextButton,\n      nextQuest: this.nextQuest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      id: \"game-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Map, {\n      showScoreModal: this.showScoreModal,\n      cityIndex: this.state.cityIndex,\n      createGame: this.createGame,\n      showModal: this.showModal,\n      currentScore: this.state.score,\n      addQuestion: this.addQuestion,\n      toggleNextButton: this.toggleNextButton,\n      setScore: this.setScore,\n      currentCity: this.state.cities[this.state.cityIndex],\n      yourChoice: this.state.yourChoice,\n      setChoice: this.setChoice,\n      toggleMarker: this.toggleMarker,\n      isMarkerShown: this.state.isMarkerShown,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\".concat(APIKEY, \"&libraries=geometry\"),\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"800px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Score, {\n      score: this.state.score,\n      previousScore: this.state.previousScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default QuizContainer;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js"],"names":["React","Component","Grid","City","Map","Score","APIKEY","DeadModal","ScoreModal","QuizContainer","state","cities","cityIndex","isMarkerShown","yourChoice","score","previousScore","nextButton","questions","deadModal","scoreModal","createGame","dataObj","game","user_id","props","user","id","questions_attributes","configObj","method","headers","body","JSON","stringify","fetch","then","resp","json","data","console","log","showScoreModal","setState","closeScoreModal","showModal","closeModal","resetPlay","addQuestion","question","toggleMarker","setChoice","latlng","nextQuest","toggleNextButton","setScore","distance","componentDidMount","render","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\nimport DeadModal from '../components/DeadModal'\nimport ScoreModal from '../components/ScoreModal'\n\nclass QuizContainer extends Component {\n  state = {\n    cities: [],\n    cityIndex: 0,\n    isMarkerShown: false,\n    yourChoice: null,\n    score: 3000,\n    previousScore: 3000,\n    nextButton: false,\n    questions: [],\n    deadModal: false,\n    scoreModal: false\n  };\n\n  createGame = () => {\n    debugger\n   let dataObj = {game: {user_id: this.props.user.id, score: this.state.score, questions_attributes: [...this.state.questions]}}\n   let configObj = {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify(dataObj)\n    }\n\n    debugger\n\n    fetch('http://localhost:3000/games', configObj).then(resp => resp.json()).then(data => console.log(data))\n  }\n\n  showScoreModal = () => {\n    this.setState({\n      scoreModal: true\n    })\n  }\n\n  closeScoreModal = () => {\n    this.setState({\n      scoreModal: false\n    })\n  }\n\n    showModal = () => {\n      this.setState({\n          deadModal: true\n      })\n  }\n\n  closeModal = () => {\n    this.setState({\n        deadModal: false\n    })\n  }\n\n  resetPlay = () => {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n\n    this.setState({\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 3000,\n      previousScore: 3000,\n      nextButton: false,\n      questions: [],\n      deadModal: false,\n      scoreModal: false\n    })\n  }\n\n  addQuestion = (question) => {\n    this.setState({\n      questions: [...this.state.questions, question]\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n  }\n\n  toggleMarker = () => {\n    this.setState({ isMarkerShown: !this.state.isMarkerShown });\n  };\n\n  setChoice = latlng => {\n    this.setState({ yourChoice: latlng });\n  };\n\n  nextQuest = () => {\n    this.setState({\n      cityIndex: this.state.cityIndex + 1,\n      nextButton: !this.state.nextButton,\n      isMarkerShown: false,\n      yourChoice: null\n    });\n  };\n\n  toggleNextButton = () => {\n    this.setState({\n      nextButton: !this.state.nextButton\n    });\n  };\n\n  setScore = distance => {\n    this.setState(state => ({\n      score: state.score - distance,\n      previousScore: state.score\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <DeadModal show={this.state.deadModal} closeModal={this.closeModal} resetPlay={this.resetPlay}/>\n        <ScoreModal show={this.state.scoreModal} resetPlay={this.resetPlay} score={this.state.score}/>\n        <City\n          currentCity={this.state.cities[this.state.cityIndex]}\n          cityIndex={this.state.cityIndex}\n          nextButton={this.state.nextButton}\n          nextQuest={this.nextQuest}\n        />\n        <Grid id=\"game-grid\">\n          <Grid.Row>\n            <Grid.Column width={13}>\n              <Map\n                showScoreModal={this.showScoreModal}\n                cityIndex={this.state.cityIndex}\n                createGame={this.createGame}\n                showModal={this.showModal}\n                currentScore={this.state.score}\n                addQuestion={this.addQuestion}\n                toggleNextButton={this.toggleNextButton}\n                setScore={this.setScore}\n                currentCity={this.state.cities[this.state.cityIndex]}\n                yourChoice={this.state.yourChoice}\n                setChoice={this.setChoice}\n                toggleMarker={this.toggleMarker}\n                isMarkerShown={this.state.isMarkerShown}\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${APIKEY}&libraries=geometry`}\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `800px` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n              />\n            </Grid.Column>\n            <Grid.Column width={1}>\n              <Score\n                score={this.state.score}\n                previousScore={this.state.previousScore}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default QuizContainer;\n"]},"metadata":{},"sourceType":"module"}