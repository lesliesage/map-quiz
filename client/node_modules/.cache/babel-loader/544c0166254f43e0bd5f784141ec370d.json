{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\";\nconst google = window.google; // reminders for resources we can use to calculate distance between the click and city coordinates\n\nlet arr = [{\n  lat: 48.8667,\n  lng: 2.3333\n}, {\n  lat: 55.7522,\n  lng: 37.6155\n}, {\n  lat: -22.925,\n  lng: -43.225\n}]; // google.maps.geometry.spherical.computeDistanceBetween(LatLng1, myLatLng)\n// const createMarker = () =>\n//   new window.google.maps.Marker({\n//     position: { lat: 43.642567, lng: -79.387054 },\n//     map: this.googleMap\n//   });\n\nlet markP = arr[0];\nlet i = 1; // {myLatLng = new google.maps.LatLng({lat: -34, lng: 151})}\n\nlet handleClick = (e, props) => {\n  props.toggleMarker();\n  let latLng = e.latLng;\n  props.setChoice(latLng);\n  let mylatlng = new window.google.maps.LatLng({\n    lat: props.currentCity.lat,\n    lng: props.currentCity.long\n  });\n  let distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLng, mylatlng) / 1000;\n  console.log(distance);\n  props.setScore(distance);\n  props.toggleNextButton();\n  debugger;\n};\n\nlet formatlatlng = currentCity => {\n  return {\n    lat: currentCity.lat,\n    lng: currentCity.long\n  };\n};\n\nconst Map = withScriptjs(withGoogleMap(props => React.createElement(React.Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, console.log(props), React.createElement(GoogleMap, {\n  defaultZoom: 2.3,\n  defaultCenter: {\n    lat: 25,\n    lng: 0\n  },\n  defaultOptions: {\n    styles: MapOptions,\n    maxZoom: 7,\n    minZoom: 2.3,\n    gestureHandling: \"cooperative\"\n  },\n  onClick: e => handleClick(e, props),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, props.isMarkerShown && props.currentCity ? React.createElement(Marker, {\n  position: formatlatlng(props.currentCity),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}) : null, props.yourChoice ? React.createElement(Marker, {\n  position: props.yourChoice,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}) : null))));\nexport default Map;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js"],"names":["React","withScriptjs","withGoogleMap","GoogleMap","Marker","MapOptions","google","window","arr","lat","lng","markP","i","handleClick","e","props","toggleMarker","latLng","setChoice","mylatlng","maps","LatLng","currentCity","long","distance","geometry","spherical","computeDistanceBetween","console","log","setScore","toggleNextButton","formatlatlng","Map","styles","maxZoom","minZoom","gestureHandling","isMarkerShown","yourChoice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\";\n\nconst google = window.google;\n// reminders for resources we can use to calculate distance between the click and city coordinates\nlet arr = [\n  { lat: 48.8667, lng: 2.3333 },\n  { lat: 55.7522, lng: 37.6155 },\n  { lat: -22.925, lng: -43.225 }\n];\n\n// google.maps.geometry.spherical.computeDistanceBetween(LatLng1, myLatLng)\n\n// const createMarker = () =>\n//   new window.google.maps.Marker({\n//     position: { lat: 43.642567, lng: -79.387054 },\n//     map: this.googleMap\n//   });\n\nlet markP = arr[0];\n\nlet i = 1;\n\n// {myLatLng = new google.maps.LatLng({lat: -34, lng: 151})}\nlet handleClick = (e, props) => {\n  props.toggleMarker()\n  let latLng = e.latLng\n  props.setChoice(latLng)\n  let mylatlng = new window.google.maps.LatLng({lat: props.currentCity.lat, lng: props.currentCity.long})\n  let distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLng, mylatlng)/1000\n  console.log(distance)\n  props.setScore(distance)\n  props.toggleNextButton()\n  debugger\n}\n\nlet formatlatlng = (currentCity) => {\n  return  {lat: currentCity.lat, lng: currentCity.long}\n  \n}\n\nconst Map = withScriptjs(\n  withGoogleMap(props => (\n    <React.Fragment>\n      {console.log(props)}\n      <GoogleMap\n        defaultZoom={2.3}\n        defaultCenter={{ lat: 25, lng: 0 }}\n        defaultOptions={{\n          styles: MapOptions,\n          maxZoom: 7,\n          minZoom: 2.3,\n          gestureHandling: \"cooperative\"\n        }}\n        onClick={(e) => handleClick(e, props)}\n      >\n        {props.isMarkerShown && props.currentCity ? <Marker position={formatlatlng(props.currentCity)}/> : null}\n        {props.yourChoice ? <Marker position={ props.yourChoice }/> : null}\n      </GoogleMap>\n    </React.Fragment>\n  ))\n);\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}