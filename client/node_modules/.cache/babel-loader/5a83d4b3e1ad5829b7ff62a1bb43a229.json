{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\n\nclass QuizContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cities: [],\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 2000,\n      nextButton: false\n    };\n\n    this.toggleMarker = () => {\n      this.setState({\n        isMarkerShown: !this.state.isMarkerShown\n      });\n    };\n\n    this.setChoice = latlng => {\n      this.setState({\n        yourChoice: latlng\n      });\n    };\n\n    this.nextQuest = () => {\n      this.setState({\n        cityIndex: this.state.cityIndex += 1,\n        nextButton: !this.state.nextButton,\n        isMarkerShown: false,\n        yourChoice: null\n      });\n    };\n\n    this.toggleNextButton = () => {\n      this.setState({\n        nextButton: !this.state.nextButton\n      });\n    };\n\n    this.setScore = distance => {\n      this.setState({\n        score: this.state.score -= distance\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n      cities: cities\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(City, {\n      currentCity: this.state.cities[this.state.cityIndex],\n      cityIndex: this.state.cityIndex,\n      nextButton: this.state.nextButton,\n      nextQuest: this.nextQuest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Map, {\n      toggleNextButton: this.toggleNextButton,\n      setScore: this.setScore,\n      currentCity: this.state.cities[this.state.cityIndex],\n      yourChoice: this.state.yourChoice,\n      setChoice: this.setChoice,\n      toggleMarker: this.toggleMarker,\n      isMarkerShown: this.state.isMarkerShown,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\".concat(APIKEY, \"&libraries=geometry\"),\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"800px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Score, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default QuizContainer;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js"],"names":["React","Component","Fragment","Grid","City","Map","Score","APIKEY","QuizContainer","state","cities","cityIndex","isMarkerShown","yourChoice","score","nextButton","toggleMarker","setState","setChoice","latlng","nextQuest","toggleNextButton","setScore","distance","componentDidMount","fetch","then","resp","json","render","height"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\n\nclass QuizContainer extends Component {\n  state = {\n    cities: [],\n    cityIndex: 0,\n    isMarkerShown: false,\n    yourChoice: null,\n    score: 2000,\n    nextButton: false\n  };\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n  }\n\n  toggleMarker = () => {\n    this.setState({ isMarkerShown: !this.state.isMarkerShown });\n  };\n\n  setChoice = latlng => {\n    this.setState({ yourChoice: latlng });\n  };\n\n  nextQuest = () => {\n    \n    this.setState({\n      cityIndex: this.state.cityIndex += 1,\n      nextButton: !this.state.nextButton,\n      isMarkerShown: false,\n      yourChoice: null\n\n    })\n  }\n\n  toggleNextButton = () => {\n   \n    this.setState({\n      nextButton: !this.state.nextButton\n    })\n  }\n\n  setScore = (distance) => {\n    this.setState({\n      score: this.state.score -= distance\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <City \n        currentCity={this.state.cities[this.state.cityIndex]} \n        cityIndex={this.state.cityIndex} \n        nextButton={this.state.nextButton} \n        nextQuest={this.nextQuest}\n        />\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={13}>\n        <Map\n        toggleNextButton={this.toggleNextButton}\n        setScore={this.setScore}\n        currentCity={this.state.cities[this.state.cityIndex]}\n        yourChoice={this.state.yourChoice}\n        setChoice={this.setChoice}\n        toggleMarker = {this.toggleMarker}\n        isMarkerShown={this.state.isMarkerShown}\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${APIKEY}&libraries=geometry`}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `800px` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n         </Grid.Column>\n            <Grid.Column width={1}>\n              <Score />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n\n    );\n  }\n}\n\nexport default QuizContainer;\n"]},"metadata":{},"sourceType":"module"}