{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\"; // reminders for resources we can use to calculate distance between the click and city coordinates\n// let arr = [\n//   { lat: 48.8667, lng: 2.3333 },\n//   { lat: 55.7522, lng: 37.6155 },\n//   { lat: -22.925, lng: -43.225 }\n// ];\n// google.maps.geometry.spherical.computeDistanceBetween(LatLng1, myLatLng)\n// const createMarker = () =>\n//   new window.google.maps.Marker({\n//     position: { lat: 43.642567, lng: -79.387054 },\n//     map: this.googleMap\n//   });\n// {myLatLng = new google.maps.LatLng({lat: -34, lng: 151})}\n\nlet handleClick = (e, props) => {\n  props.toggleMarker();\n  let latLng = e.latLng;\n  props.setChoice(latLng);\n  let mylatlng = new window.google.maps.LatLng({\n    lat: props.currentCity.lat,\n    lng: props.currentCity.long\n  });\n  let distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLng, mylatlng) / 10000; // console.log(distance);\n\n  if (props.currentScore - distance >= 0) {\n    props.setScore(distance);\n    props.toggleNextButton();\n    let formattedQuestion = {\n      distance: distance,\n      city_id: props.currentCity.id\n    };\n    props.addQuestion(formattedQuestion);\n\n    if (props.cityIndex >= 19) {\n      props.createGame();\n      props.showScoreModal();\n    }\n  } else {\n    props.showModal();\n  }\n};\n\nlet formatlatlng = currentCity => {\n  return {\n    lat: currentCity.lat,\n    lng: currentCity.long\n  };\n};\n\nconst Map = withScriptjs(withGoogleMap(props => React.createElement(React.Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}, React.createElement(GoogleMap, {\n  defaultZoom: 2.3,\n  defaultCenter: {\n    lat: 25,\n    lng: 0\n  },\n  defaultOptions: {\n    styles: MapOptions,\n    maxZoom: 7,\n    minZoom: 2.3,\n    gestureHandling: \"greedy\",\n    draggableCursor: \"crosshair\"\n  },\n  onClick: e => handleClick(e, props),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}, props.isMarkerShown && props.currentCity ? React.createElement(Marker, {\n  icon: {\n    url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n  },\n  position: formatlatlng(props.currentCity),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n}) : null, props.yourChoice ? React.createElement(Marker, {\n  icon: {\n    url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n  },\n  position: props.yourChoice,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n}) : null))));\nexport default Map;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js"],"names":["React","withScriptjs","withGoogleMap","GoogleMap","Marker","MapOptions","handleClick","e","props","toggleMarker","latLng","setChoice","mylatlng","window","google","maps","LatLng","lat","currentCity","lng","long","distance","geometry","spherical","computeDistanceBetween","currentScore","setScore","toggleNextButton","formattedQuestion","city_id","id","addQuestion","cityIndex","createGame","showScoreModal","showModal","formatlatlng","Map","styles","maxZoom","minZoom","gestureHandling","draggableCursor","isMarkerShown","url","yourChoice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\";\n\n// reminders for resources we can use to calculate distance between the click and city coordinates\n// let arr = [\n//   { lat: 48.8667, lng: 2.3333 },\n//   { lat: 55.7522, lng: 37.6155 },\n//   { lat: -22.925, lng: -43.225 }\n// ];\n\n// google.maps.geometry.spherical.computeDistanceBetween(LatLng1, myLatLng)\n\n// const createMarker = () =>\n//   new window.google.maps.Marker({\n//     position: { lat: 43.642567, lng: -79.387054 },\n//     map: this.googleMap\n//   });\n\n// {myLatLng = new google.maps.LatLng({lat: -34, lng: 151})}\nlet handleClick = (e, props) => {\n  props.toggleMarker();\n  let latLng = e.latLng;\n  props.setChoice(latLng);\n  let mylatlng = new window.google.maps.LatLng({\n    lat: props.currentCity.lat,\n    lng: props.currentCity.long\n  });\n  let distance =\n    window.google.maps.geometry.spherical.computeDistanceBetween(\n      latLng,\n      mylatlng\n    ) / 10000;\n  // console.log(distance);\n  if (props.currentScore - distance >= 0) {\n    props.setScore(distance);\n    props.toggleNextButton();\n    let formattedQuestion = {\n      distance: distance,\n      city_id: props.currentCity.id\n    };\n    props.addQuestion(formattedQuestion);\n\n    if (props.cityIndex >= 19) {\n      props.createGame();\n      props.showScoreModal();\n    }\n  } else {\n    props.showModal();\n  }\n};\n\nlet formatlatlng = currentCity => {\n  return { lat: currentCity.lat, lng: currentCity.long };\n};\n\nconst Map = withScriptjs(\n  withGoogleMap(props => (\n    <React.Fragment>\n      {/* {console.log(props)} */}\n      <GoogleMap\n        defaultZoom={2.3}\n        defaultCenter={{ lat: 25, lng: 0 }}\n        defaultOptions={{\n          styles: MapOptions,\n          maxZoom: 7,\n          minZoom: 2.3,\n          gestureHandling: \"greedy\",\n          draggableCursor: \"crosshair\"\n        }}\n        onClick={e => handleClick(e, props)}\n      >\n        {props.isMarkerShown && props.currentCity ? (\n          <Marker\n            icon={{\n              url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n            }}\n            position={formatlatlng(props.currentCity)}\n          />\n        ) : null}\n        {props.yourChoice ? (\n          <Marker\n            icon={{\n              url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n            }}\n            position={props.yourChoice}\n          />\n        ) : null}\n      </GoogleMap>\n    </React.Fragment>\n  ))\n);\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}