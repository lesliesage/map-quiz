{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js\";\nimport React, { Component } from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\";\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.arr = [{\n      lat: 48.8667,\n      lng: 2.3333\n    }, {\n      lat: 55.7522,\n      lng: 37.6155\n    }, {\n      lat: -22.925,\n      lng: -43.225\n    }];\n\n    this.handleClick = (e, props) => {\n      props.toggleMarker();\n      let latLng = e.latLng;\n      props.setChoice(latLng);\n      let mylatlng = new window.google.maps.LatLng({\n        lat: props.currentCity.lat,\n        lng: props.currentCity.long\n      });\n      let distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLng, mylatlng) / 10000;\n      console.log(distance);\n\n      if (props.currentScore - distance >= 0) {\n        props.setScore(distance); // props.toggleNextButton();\n\n        let formattedQuestion = {\n          distance: distance,\n          city_id: props.currentCity.id\n        };\n        props.addQuestion(formattedQuestion);\n\n        if (props.cityIndex >= 19) {\n          props.createGame();\n          props.showScoreModal();\n        }\n      } else {\n        props.showModal();\n      }\n    };\n\n    this.formatlatlng = currentCity => {\n      return {\n        lat: currentCity.lat,\n        lng: currentCity.long\n      };\n    };\n\n    this.showCityMarker = props => {\n      // setTimeout(() => {\n      return props.isMarkerShown && props.currentCity ? React.createElement(Marker, {\n        icon: {\n          url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n        },\n        position: formatlatlng(props.currentCity),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }) : null; // }, 1000)\n    };\n  }\n\n  render() {\n    return withScriptjs(withGoogleMap(props => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, console.log(props), React.createElement(GoogleMap, {\n      defaultZoom: 2.3,\n      defaultCenter: {\n        lat: 25,\n        lng: 0\n      },\n      defaultOptions: {\n        styles: MapOptions,\n        maxZoom: 7,\n        minZoom: 2.3,\n        gestureHandling: \"greedy\"\n      },\n      onClick: e => handleClick(e, props),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, props.yourChoice ? React.createElement(Marker, {\n      icon: {\n        url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n      },\n      position: props.yourChoice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : null, showCityMarker(props)))));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js"],"names":["React","Component","withScriptjs","withGoogleMap","GoogleMap","Marker","MapOptions","Map","arr","lat","lng","handleClick","e","props","toggleMarker","latLng","setChoice","mylatlng","window","google","maps","LatLng","currentCity","long","distance","geometry","spherical","computeDistanceBetween","console","log","currentScore","setScore","formattedQuestion","city_id","id","addQuestion","cityIndex","createGame","showScoreModal","showModal","formatlatlng","showCityMarker","isMarkerShown","url","render","styles","maxZoom","minZoom","gestureHandling","yourChoice"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\";\n\nclass Map extends Component {\n  arr = [\n    { lat: 48.8667, lng: 2.3333 },\n    { lat: 55.7522, lng: 37.6155 },\n    { lat: -22.925, lng: -43.225 }\n  ];\n\n  handleClick = (e, props) => {\n    props.toggleMarker();\n    let latLng = e.latLng;\n    props.setChoice(latLng);\n    let mylatlng = new window.google.maps.LatLng({\n      lat: props.currentCity.lat,\n      lng: props.currentCity.long\n    });\n    let distance =\n      window.google.maps.geometry.spherical.computeDistanceBetween(\n        latLng,\n        mylatlng\n      ) / 10000;\n    console.log(distance);\n    if (props.currentScore - distance >= 0) {\n      props.setScore(distance);\n      // props.toggleNextButton();\n      let formattedQuestion = {\n        distance: distance,\n        city_id: props.currentCity.id\n      };\n      props.addQuestion(formattedQuestion);\n\n      if (props.cityIndex >= 19) {\n        props.createGame();\n        props.showScoreModal();\n      }\n    } else {\n      props.showModal();\n    }\n  };\n\n  formatlatlng = currentCity => {\n    return { lat: currentCity.lat, lng: currentCity.long };\n  };\n\n  showCityMarker = props => {\n    // setTimeout(() => {\n    return props.isMarkerShown && props.currentCity ? (\n      <Marker\n        icon={{\n          url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n        }}\n        position={formatlatlng(props.currentCity)}\n      />\n    ) : null;\n    // }, 1000)\n  };\n\n  render() {\n    return withScriptjs(\n      withGoogleMap(props => (\n        <React.Fragment>\n          {console.log(props)}\n          <GoogleMap\n            defaultZoom={2.3}\n            defaultCenter={{ lat: 25, lng: 0 }}\n            defaultOptions={{\n              styles: MapOptions,\n              maxZoom: 7,\n              minZoom: 2.3,\n              gestureHandling: \"greedy\"\n            }}\n            onClick={e => handleClick(e, props)}\n          >\n            {props.yourChoice ? (\n              <Marker\n                icon={{\n                  url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n                }}\n                position={props.yourChoice}\n              />\n            ) : null}\n            {showCityMarker(props)}\n          </GoogleMap>\n        </React.Fragment>\n      ))\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}