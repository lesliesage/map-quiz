{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js\";\nimport React, { Component } from \"react\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\nimport DeadModal from \"../components/DeadModal\";\nimport ScoreModal from \"../components/ScoreModal\";\nimport { Spring } from \"react-spring/renderprops\";\n\nclass QuizContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cities: [],\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 3000,\n      previousScore: 3000,\n      nextButton: false,\n      questions: [],\n      unresponsive: false,\n      deadModal: false,\n      scoreModal: false\n    };\n\n    this.createGame = () => {\n      let dataObj = {\n        game: {\n          user_id: this.props.user.id,\n          score: this.state.score,\n          questions_attributes: [...this.state.questions]\n        }\n      };\n      let configObj = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(dataObj)\n      };\n      fetch(\"http://localhost:3000/games\", configObj).then(resp => resp.json()).then(data => console.log(data));\n    };\n\n    this.showScoreModal = () => {\n      this.setState({\n        scoreModal: true\n      });\n    };\n\n    this.closeScoreModal = () => {\n      this.setState({\n        scoreModal: false\n      });\n    };\n\n    this.showModal = () => {\n      this.setState({\n        deadModal: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        deadModal: false\n      });\n    };\n\n    this.resetPlay = () => {\n      fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n        cities: cities\n      }));\n      this.setState({\n        cityIndex: 0,\n        isMarkerShown: false,\n        yourChoice: null,\n        score: 3000,\n        previousScore: 3000,\n        distance: null,\n        nextButton: false,\n        questions: [],\n        deadModal: false,\n        unresponsive: false,\n        scoreModal: false\n      });\n    };\n\n    this.setDistance = distance => {\n      this.setState({\n        distance: distance\n      });\n    };\n\n    this.addQuestion = question => {\n      this.setState({\n        questions: [...this.state.questions, question]\n      });\n    };\n\n    this.toggleMarker = () => {\n      this.setState({\n        isMarkerShown: !this.state.isMarkerShown\n      });\n    };\n\n    this.setChoice = latlng => {\n      this.setState({\n        yourChoice: latlng\n      });\n    };\n\n    this.nextQuest = () => {\n      this.setState({\n        cityIndex: this.state.cityIndex + 1,\n        nextButton: !this.state.nextButton,\n        unresponsive: false,\n        isMarkerShown: false,\n        yourChoice: null,\n        distance: null\n      });\n    };\n\n    this.toggleNextButton = () => {\n      this.setState({\n        nextButton: !this.state.nextButton\n      });\n    };\n\n    this.setScore = distance => {\n      this.setState(state => ({\n        score: state.score - distance,\n        previousScore: state.score\n      }));\n    };\n\n    this.makeUnresp = () => {\n      this.setState({\n        unresponsive: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\").then(resp => resp.json()).then(cities => this.setState({\n      cities: cities\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(DeadModal, {\n      show: this.state.deadModal,\n      closeModal: this.closeModal,\n      resetPlay: this.resetPlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(ScoreModal, {\n      show: this.state.scoreModal,\n      resetPlay: this.resetPlay,\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(City, {\n      currentCity: this.state.cities[this.state.cityIndex],\n      cityIndex: this.state.cityIndex,\n      nextButton: this.state.nextButton,\n      nextQuest: this.nextQuest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Spring, {\n      from: {\n        opacity: 0\n      },\n      to: {\n        opacity: this.state.distance ? 1 : 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, props => React.createElement(\"div\", {\n      id: \"distance-away\",\n      style: props,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.state.distance))), React.createElement(Grid, {\n      id: \"game-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Map, {\n      setDistance: this.setDistance,\n      makeUnresp: this.makeUnresp,\n      unresponsive: this.state.unresponsive,\n      showScoreModal: this.showScoreModal,\n      cityIndex: this.state.cityIndex,\n      createGame: this.createGame,\n      showModal: this.showModal,\n      currentScore: this.state.score,\n      addQuestion: this.addQuestion,\n      toggleNextButton: this.toggleNextButton,\n      setScore: this.setScore,\n      currentCity: this.state.cities[this.state.cityIndex],\n      yourChoice: this.state.yourChoice,\n      setChoice: this.setChoice,\n      toggleMarker: this.toggleMarker,\n      isMarkerShown: this.state.isMarkerShown,\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\".concat(APIKEY, \"&libraries=geometry\"),\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"650px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Score, {\n      score: this.state.score,\n      previousScore: this.state.previousScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default QuizContainer;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/containers/QuizContainer.js"],"names":["React","Component","Grid","Icon","City","Map","Score","APIKEY","DeadModal","ScoreModal","Spring","QuizContainer","state","cities","cityIndex","isMarkerShown","yourChoice","score","previousScore","nextButton","questions","unresponsive","deadModal","scoreModal","createGame","dataObj","game","user_id","props","user","id","questions_attributes","configObj","method","headers","body","JSON","stringify","fetch","then","resp","json","data","console","log","showScoreModal","setState","closeScoreModal","showModal","closeModal","resetPlay","distance","setDistance","addQuestion","question","toggleMarker","setChoice","latlng","nextQuest","toggleNextButton","setScore","makeUnresp","componentDidMount","render","opacity","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Icon } from \"semantic-ui-react\";\nimport City from \"../components/City.js\";\nimport Map from \"../components/Map.js\";\nimport Score from \"../components/Score.js\";\nimport APIKEY from \"../APIKEY.js\";\nimport DeadModal from \"../components/DeadModal\";\nimport ScoreModal from \"../components/ScoreModal\";\nimport { Spring } from \"react-spring/renderprops\";\n\nclass QuizContainer extends Component {\n  state = {\n    cities: [],\n    cityIndex: 0,\n    isMarkerShown: false,\n    yourChoice: null,\n    score: 3000,\n    previousScore: 3000,\n    nextButton: false,\n    questions: [],\n    unresponsive: false,\n    deadModal: false,\n    scoreModal: false\n  };\n\n  createGame = () => {\n    let dataObj = {\n      game: {\n        user_id: this.props.user.id,\n        score: this.state.score,\n        questions_attributes: [...this.state.questions]\n      }\n    };\n    let configObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dataObj)\n    };\n\n    fetch(\"http://localhost:3000/games\", configObj)\n      .then(resp => resp.json())\n      .then(data => console.log(data));\n  };\n\n  showScoreModal = () => {\n    this.setState({\n      scoreModal: true\n    });\n  };\n\n  closeScoreModal = () => {\n    this.setState({\n      scoreModal: false\n    });\n  };\n\n  showModal = () => {\n    this.setState({\n      deadModal: true\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      deadModal: false\n    });\n  };\n\n  resetPlay = () => {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n\n    this.setState({\n      cityIndex: 0,\n      isMarkerShown: false,\n      yourChoice: null,\n      score: 3000,\n      previousScore: 3000,\n      distance: null,\n      nextButton: false,\n      questions: [],\n      deadModal: false,\n      unresponsive: false,\n      scoreModal: false\n    });\n  };\n\n  setDistance = distance => {\n    this.setState({ distance: distance });\n  };\n\n  addQuestion = question => {\n    this.setState({\n      questions: [...this.state.questions, question]\n    });\n  };\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/randomtwenty\")\n      .then(resp => resp.json())\n      .then(cities => this.setState({ cities: cities }));\n  }\n\n  toggleMarker = () => {\n    this.setState({ isMarkerShown: !this.state.isMarkerShown });\n  };\n\n  setChoice = latlng => {\n    this.setState({ yourChoice: latlng });\n  };\n\n  nextQuest = () => {\n    this.setState({\n      cityIndex: this.state.cityIndex + 1,\n      nextButton: !this.state.nextButton,\n      unresponsive: false,\n      isMarkerShown: false,\n      yourChoice: null,\n      distance: null\n    });\n  };\n\n  toggleNextButton = () => {\n    this.setState({\n      nextButton: !this.state.nextButton\n    });\n  };\n\n  setScore = distance => {\n    this.setState(state => ({\n      score: state.score - distance,\n      previousScore: state.score\n    }));\n  };\n\n  makeUnresp = () => {\n    this.setState({ unresponsive: true });\n  };\n\n  render() {\n    return (\n      <div>\n        <DeadModal\n          show={this.state.deadModal}\n          closeModal={this.closeModal}\n          resetPlay={this.resetPlay}\n        />\n        <ScoreModal\n          show={this.state.scoreModal}\n          resetPlay={this.resetPlay}\n          score={this.state.score}\n        />\n        <City\n          currentCity={this.state.cities[this.state.cityIndex]}\n          cityIndex={this.state.cityIndex}\n          nextButton={this.state.nextButton}\n          nextQuest={this.nextQuest}\n        />\n        <Spring\n          from={{ opacity: 0 }}\n          to={{ opacity: this.state.distance ? 1 : 0 }}\n        >\n          {props => (\n            <div id=\"distance-away\" style={props}>\n              <h4>{this.state.distance}</h4>\n              \n            </div>\n          )}\n        </Spring>\n        <Grid id=\"game-grid\">\n          <Grid.Row>\n            <Grid.Column width={13}>\n              <Map\n                setDistance={this.setDistance}\n                makeUnresp={this.makeUnresp}\n                unresponsive={this.state.unresponsive}\n                showScoreModal={this.showScoreModal}\n                cityIndex={this.state.cityIndex}\n                createGame={this.createGame}\n                showModal={this.showModal}\n                currentScore={this.state.score}\n                addQuestion={this.addQuestion}\n                toggleNextButton={this.toggleNextButton}\n                setScore={this.setScore}\n                currentCity={this.state.cities[this.state.cityIndex]}\n                yourChoice={this.state.yourChoice}\n                setChoice={this.setChoice}\n                toggleMarker={this.toggleMarker}\n                isMarkerShown={this.state.isMarkerShown}\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${APIKEY}&libraries=geometry`}\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `650px` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n              />\n            </Grid.Column>\n            <Grid.Column width={1}>\n              <Score\n                score={this.state.score}\n                previousScore={this.state.previousScore}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default QuizContainer;\n"]},"metadata":{},"sourceType":"module"}