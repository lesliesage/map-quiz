{"ast":null,"code":"var _jsxFileName = \"/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\"; // reminders for resources we can use to calculate distance between the click and city coordinates\n\nlet arr = [{\n  lat: 48.8667,\n  lng: 2.3333\n}, {\n  lat: 55.7522,\n  lng: 37.6155\n}, {\n  lat: -22.925,\n  lng: -43.225\n}]; // google.maps.geometry.spherical.computeDistanceBetween(LatLng1, myLatLng)\n// const createMarker = () =>\n//   new window.google.maps.Marker({\n//     position: { lat: 43.642567, lng: -79.387054 },\n//     map: this.googleMap\n//   });\n// {myLatLng = new google.maps.LatLng({lat: -34, lng: 151})}\n\nlet handleClick = (e, props) => {\n  props.toggleMarker();\n  let latLng = e.latLng;\n  props.setChoice(latLng);\n  let mylatlng = new window.google.maps.LatLng({\n    lat: props.currentCity.lat,\n    lng: props.currentCity.long\n  });\n  let distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLng, mylatlng) / 10000;\n  console.log(distance);\n\n  if (props.currentScore - distance >= 0) {\n    props.setScore(distance);\n    props.toggleNextButton();\n    let formattedQuestion = {\n      distance: distance,\n      city_id: props.currentCity.id\n    };\n    props.addQuestion(formattedQuestion);\n\n    if (props.cityIndex >= 19) {\n      props.createGame();\n      props.showScoreModal();\n    }\n  } else {\n    props.showModal();\n  }\n};\n\nlet formatlatlng = currentCity => {\n  return {\n    lat: currentCity.lat,\n    lng: currentCity.long\n  };\n};\n\nconst Map = withScriptjs(withGoogleMap(props => React.createElement(React.Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, console.log(props), React.createElement(GoogleMap, {\n  defaultZoom: 2.3,\n  defaultCenter: {\n    lat: 25,\n    lng: 0\n  },\n  defaultOptions: {\n    styles: MapOptions,\n    maxZoom: 7,\n    minZoom: 2.3,\n    gestureHandling: \"cooperative\"\n  },\n  onClick: e => handleClick(e, props),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, props.isMarkerShown && props.currentCity ? React.createElement(Marker, {\n  icon: {\n    url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n  },\n  position: formatlatlng(props.currentCity),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}) : null, props.yourChoice ? React.createElement(Marker, {\n  icon: {\n    url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n  },\n  position: props.yourChoice,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n}) : null))));\nexport default Map;","map":{"version":3,"sources":["/Users/lesliesage/Development/Projects/mappy-quizzes/map-quiz-frontend/src/components/Map.js"],"names":["React","withScriptjs","withGoogleMap","GoogleMap","Marker","MapOptions","arr","lat","lng","handleClick","e","props","toggleMarker","latLng","setChoice","mylatlng","window","google","maps","LatLng","currentCity","long","distance","geometry","spherical","computeDistanceBetween","console","log","currentScore","setScore","toggleNextButton","formattedQuestion","city_id","id","addQuestion","cityIndex","createGame","showScoreModal","showModal","formatlatlng","Map","styles","maxZoom","minZoom","gestureHandling","isMarkerShown","url","yourChoice"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from \"react-google-maps\";\nimport MapOptions from \"../MapOptions.json\";\n\n\n// reminders for resources we can use to calculate distance between the click and city coordinates\nlet arr = [\n  { lat: 48.8667, lng: 2.3333 },\n  { lat: 55.7522, lng: 37.6155 },\n  { lat: -22.925, lng: -43.225 }\n];\n\n// google.maps.geometry.spherical.computeDistanceBetween(LatLng1, myLatLng)\n\n// const createMarker = () =>\n//   new window.google.maps.Marker({\n//     position: { lat: 43.642567, lng: -79.387054 },\n//     map: this.googleMap\n//   });\n\n\n\n// {myLatLng = new google.maps.LatLng({lat: -34, lng: 151})}\nlet handleClick = (e, props) => {\n  props.toggleMarker()\n  let latLng = e.latLng\n  props.setChoice(latLng)\n  let mylatlng = new window.google.maps.LatLng({lat: props.currentCity.lat, lng: props.currentCity.long})\n  let distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLng, mylatlng)/10000\n  console.log(distance)\n  if (props.currentScore - distance >= 0) {\n    props.setScore(distance)\n    props.toggleNextButton()\n    let formattedQuestion = {distance: distance, city_id: props.currentCity.id}\n    props.addQuestion(formattedQuestion)\n   \n    if(props.cityIndex >= 19){\n      \n      props.createGame()\n      props.showScoreModal()\n    }\n  } else {\n    props.showModal()\n  }\n}\n\nlet formatlatlng = (currentCity) => {\n  return  {lat: currentCity.lat, lng: currentCity.long}\n  \n}\n\nconst Map = withScriptjs(\n  withGoogleMap(props => (\n    <React.Fragment>\n      {console.log(props)}\n      <GoogleMap\n        defaultZoom={2.3}\n        defaultCenter={{ lat: 25, lng: 0 }}\n        defaultOptions={{\n          styles: MapOptions,\n          maxZoom: 7,\n          minZoom: 2.3,\n          gestureHandling: \"cooperative\"\n        }}\n        onClick={(e) => handleClick(e, props)}\n      >\n        {props.isMarkerShown && props.currentCity ? <Marker icon={{                               url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"                           }} position={formatlatlng(props.currentCity)}/> : null}\n        {props.yourChoice ? <Marker icon={{url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"}}position={ props.yourChoice }/> : null}\n      </GoogleMap>\n    </React.Fragment>\n  ))\n);\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}